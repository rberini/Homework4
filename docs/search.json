[
  {
    "objectID": "reading_and_combining_data.html",
    "href": "reading_and_combining_data.html",
    "title": "Reading and Combining Data",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\"../MyData.csv\"\n\nWhat are the major benefits of using R projects?\n\nR projects establish a directory or remote repository to keep related files together. For instance, scripts, markdown documents and source data files can be kept together. For source files, this allows more consistent the use of relative paths. Workspace and history can be associated with a unique project context as well.\n\nWhat is git and what is github?\n\nGit is an open source version control system for keeping track of changes to code and other files in projects. It is used by individuals, teams or organizations. GitHub is a cloud-based remote repository service. GitHub supports and extends Git’s version control with features such as task management.\n\nWhat are the two main differences between a tibble and a data.frame?\n\nTibbles are designed to print only the first several rows and a number of columns optimized to the screen real estate (as well as abbreviated column types). Also, tibbles do not simplify. Tibbles subset somewhat differently, and more consistently, than dataframes. In tibbles, [ ] always returns a tibble, while in dataframes it might return a dataframe or a vector. Also, dataframes will execute partial matching when subsetting while tibbles will not.\n\nRewrite the following nested function call using BaseR’s chaining operator:\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; 1.55), Species)\n\niris |&gt;   as_tibble() |&gt;   select(starts_with(\"Petal\"), Species) |&gt;   filter(Petal.Length &lt; 1.55) |&gt;   arrange(Species)"
  },
  {
    "objectID": "reading_and_combining_data.html#task-1-conceptual-questions",
    "href": "reading_and_combining_data.html#task-1-conceptual-questions",
    "title": "Reading and Combining Data",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\"../MyData.csv\"\n\nWhat are the major benefits of using R projects?\n\nR projects establish a directory or remote repository to keep related files together. For instance, scripts, markdown documents and source data files can be kept together. For source files, this allows more consistent the use of relative paths. Workspace and history can be associated with a unique project context as well.\n\nWhat is git and what is github?\n\nGit is an open source version control system for keeping track of changes to code and other files in projects. It is used by individuals, teams or organizations. GitHub is a cloud-based remote repository service. GitHub supports and extends Git’s version control with features such as task management.\n\nWhat are the two main differences between a tibble and a data.frame?\n\nTibbles are designed to print only the first several rows and a number of columns optimized to the screen real estate (as well as abbreviated column types). Also, tibbles do not simplify. Tibbles subset somewhat differently, and more consistently, than dataframes. In tibbles, [ ] always returns a tibble, while in dataframes it might return a dataframe or a vector. Also, dataframes will execute partial matching when subsetting while tibbles will not.\n\nRewrite the following nested function call using BaseR’s chaining operator:\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; 1.55), Species)\n\niris |&gt;   as_tibble() |&gt;   select(starts_with(\"Petal\"), Species) |&gt;   filter(Petal.Length &lt; 1.55) |&gt;   arrange(Species)"
  },
  {
    "objectID": "reading_and_combining_data.html#task-2-reading-delimited-data",
    "href": "reading_and_combining_data.html#task-2-reading-delimited-data",
    "title": "Reading and Combining Data",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data\nLoad tidyverse.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nGlass data\nRead glass.data into R directly from the URL.\n\nglass_cols = c(\"id\", \"refractive_index\", \"sodium\", \"magnesium\", \"aluminum\", \"silicon\", \"potassium\", \"calcium\", \"barium\", \"iron\", \"glass_type\")\n\nglass_data &lt;- read_csv(\n  \"https://www4.stat.ncsu.edu/online/datasets/glass.data\",\n  col_names = glass_cols\n  )\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): id, refractive_index, sodium, magnesium, aluminum, silicon, potass...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      id refractive_index sodium magnesium aluminum silicon potassium calcium\n   &lt;dbl&gt;            &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1     1             1.52   13.6      4.49     1.1     71.8      0.06    8.75\n 2     2             1.52   13.9      3.6      1.36    72.7      0.48    7.83\n 3     3             1.52   13.5      3.55     1.54    73.0      0.39    7.78\n 4     4             1.52   13.2      3.69     1.29    72.6      0.57    8.22\n 5     5             1.52   13.3      3.62     1.24    73.1      0.55    8.07\n 6     6             1.52   12.8      3.61     1.62    73.0      0.64    8.07\n 7     7             1.52   13.3      3.6      1.14    73.1      0.58    8.17\n 8     8             1.52   13.2      3.61     1.05    73.2      0.57    8.24\n 9     9             1.52   14.0      3.58     1.37    72.1      0.56    8.3 \n10    10             1.52   13        3.6      1.36    73.0      0.57    8.4 \n# ℹ 204 more rows\n# ℹ 3 more variables: barium &lt;dbl&gt;, iron &lt;dbl&gt;, glass_type &lt;dbl&gt;\n\n\nStart a chain that overwrites the glass_type variable using mutate(). Continue the chain and keep only observations where the iron variable is less than 0.2 and glass_type is either “tableware” or “headlamp”.\n\nglass_data |&gt;\n  mutate(glass_type = as.factor(glass_type)) |&gt;\n  mutate(glass_type = fct_recode(glass_type,\n  \"building_windows_float_processed\" = \"1\",\n  \"building_windows_non_float_processed\" = \"2\",\n  \"vehicle_windows_float_processed\" = \"3\",\n  \"containers\" = \"5\",\n  \"tableware\" = \"6\",\n  \"headlamps\" = \"7\"\n  )\n  ) |&gt;\n  filter(\n    iron &lt; 0.2 & (glass_type == \"tableware\" | glass_type == \"headlamps\")\n  )\n\n# A tibble: 38 × 11\n      id refractive_index sodium magnesium aluminum silicon potassium calcium\n   &lt;dbl&gt;            &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1   177             1.52   14        2.39     1.56    72.4      0       9.57\n 2   178             1.52   13.8      2.41     1.19    72.8      0       9.77\n 3   179             1.52   14.5      2.24     1.62    72.4      0       9.26\n 4   180             1.52   14.1      2.19     1.66    72.7      0       9.32\n 5   181             1.51   14.4      1.74     1.54    74.6      0       7.59\n 6   182             1.52   15.0      0.78     1.74    72.5      0       9.95\n 7   183             1.52   14.2      0        2.09    72.7      0      10.9 \n 8   184             1.52   14.6      0        0.56    73.5      0      11.2 \n 9   185             1.51   17.4      0        0.34    75.4      0       6.65\n10   186             1.51   13.7      3.2      1.81    72.8      1.76    5.43\n# ℹ 28 more rows\n# ℹ 3 more variables: barium &lt;dbl&gt;, iron &lt;dbl&gt;, glass_type &lt;fct&gt;\n\n\n\n\nYeast data\nRead yeast.data into R directly from the URL.\n\nyeast_cols = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\",\"nuc\", \"class\")\n\nyeast_data &lt;- read_table(\n  \"https://www4.stat.ncsu.edu/online/datasets/yeast.data\",\n  col_names = yeast_cols\n  )\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nStart a chain that removes the seq_name and nuc columns. Continue the chain to add columns corresponding to the mean and median of each numeric variable at each class grouping.\n\nyeast_data |&gt;\n  select(!c(seq_name, nuc)) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, median = median), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;"
  },
  {
    "objectID": "reading_and_combining_data.html#task-3-combining-excel-and-delimited-data",
    "href": "reading_and_combining_data.html#task-3-combining-excel-and-delimited-data",
    "title": "Reading and Combining Data",
    "section": "Task 3: Combining Excel and Delimited Data",
    "text": "Task 3: Combining Excel and Delimited Data\nLoad readxl package.\n\nlibrary(readxl)\n\n\nWhite wine\nDownload white wine Excel file from URL and place in project working directory. Import data from the first sheet using the readxl package. Print the tibble.\n\ndownload.file(\"https://www4.stat.ncsu.edu/~online/datasets/white-wine.xlsx\", \"white-wine.xlsx\")\n\n\nwhite_wine &lt;- read_xlsx(\"white-wine.xlsx\", sheet = 1)\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nRead in data from 2nd sheet in white wine Excel file, returning a data frame with a column containing alternative versions of the variable names.\n\nwhite_wine_cols &lt;- read_xlsx(\"white-wine.xlsx\", sheet = 2)\nwhite_wine_cols\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\n\nGrab above column and overwrite the current column names for the white_wine tibble.\n\ncolnames(white_wine) &lt;- white_wine_cols[[1]]\nwhite_wine\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nAdd a column to white_wine tibble to indicate all these wines are “white”.\n\nwhite_wine$type &lt;- \"white\"\nwhite_wine\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\n\nRed wine\nRead in red wine data set from URL using the readr package.\n\nred_wine &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\", delim = \";\", col_types = cols(.default = \"d\"))\nred_wine\n\n# A tibble: 1,599 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1             7.4               0.7           0                 1.9     0.076\n 2             7.8               0.88          0                 2.6     0.098\n 3             7.8               0.76          0.04              2.3     0.092\n 4            11.2               0.28          0.56              1.9     0.075\n 5             7.4               0.7           0                 1.9     0.076\n 6             7.4               0.66          0                 1.8     0.075\n 7             7.9               0.6           0.06              1.6     0.069\n 8             7.3               0.65          0                 1.2     0.065\n 9             7.8               0.58          0.02              2       0.073\n10             7.5               0.5           0.36              6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nOverwrite the current column names for the red_wine tibble with same used for white_wine tibble.\n\ncolnames(red_wine) &lt;- white_wine_cols[[1]]\nred_wine\n\n# A tibble: 1,599 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nAdd a column to red_wine tibble to indicate all these wines are “red”.\n\nred_wine$type &lt;- \"red\"\nred_wine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\n\nCombined wine data\nCombine white_wine and red_wine data sets into a single data set, wine.\n\nwine &lt;- bind_rows(list(white_wine, red_wine))\nwine\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nExecute the following chain on the wine tibble:\n\nFilter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132)\nSort the data from highest quality to lowest\nSelect only the variables that contain “acid”, the alcohol variable, the type variable and the quality variable\nAdd the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable\n\n\nwine |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol:type) |&gt;\n  group_by(quality) |&gt;\n  mutate(\n    alcohol_mean = mean(alcohol),\n    alcohol_sd = sd(alcohol)\n    )\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol quality type  alcohol_mean\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;\n 1            91             0.27        0.45     104       9 white        122. \n 2            66             0.36        0.29     124       9 white        122. \n 3            74             0.24        0.36     125       9 white        122. \n 4            69             0.36        0.34     127       9 white        122. \n 5            71             0.26        0.49     129       9 white        122. \n 6            62             0.66        0.48     128       8 white         94.1\n 7            62             0.66        0.48     128       8 white         94.1\n 8            68             0.26        0.42     105       8 white         94.1\n 9            67             0.23        0.31     107       8 white         94.1\n10            67             0.23        0.31     107       8 white         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: alcohol_sd &lt;dbl&gt;"
  }
]